/*
 * This file is part of the OWL API.
 *
 * The contents of this file are subject to the LGPL License, Version 3.0.
 *
 * Copyright (C) 2011, Ulm University
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 *
 * Alternatively, the contents of this file may be used under the terms of the Apache License, Version 2.0
 * in which case, the provisions of the Apache License Version 2.0 are applicable instead of those above.
 *
 * Copyright 2011, Ulm University
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generated By:JavaCC: Do not edit this line. KRSS2ParserConstants.java */
package de.uulm.ecs.ai.owlapi.krssparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface KRSS2ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_START = 8;
  /** RegularExpression Id. */
  int IRI_START = 11;
  /** RegularExpression Id. */
  int IRI_END = 12;
  /** RegularExpression Id. */
  int TOP = 14;
  /** RegularExpression Id. */
  int BOTTOM = 15;
  /** RegularExpression Id. */
  int NIL = 16;
  /** RegularExpression Id. */
  int TRUE = 17;
  /** RegularExpression Id. */
  int OPENPAR = 18;
  /** RegularExpression Id. */
  int CLOSEPAR = 19;
  /** RegularExpression Id. */
  int ENDTBOX = 20;
  /** RegularExpression Id. */
  int ENDABOX = 21;
  /** RegularExpression Id. */
  int COMPOSE = 22;
  /** RegularExpression Id. */
  int DEFINECONCEPT = 23;
  /** RegularExpression Id. */
  int DEFINEPRIMITIVECONCEPT = 24;
  /** RegularExpression Id. */
  int DISJOINT = 25;
  /** RegularExpression Id. */
  int EQUIVALENT = 26;
  /** RegularExpression Id. */
  int IMPLIES = 27;
  /** RegularExpression Id. */
  int AND = 28;
  /** RegularExpression Id. */
  int OR = 29;
  /** RegularExpression Id. */
  int NOT = 30;
  /** RegularExpression Id. */
  int ALL = 31;
  /** RegularExpression Id. */
  int ONEOF = 32;
  /** RegularExpression Id. */
  int SOME = 33;
  /** RegularExpression Id. */
  int ATLEAST = 34;
  /** RegularExpression Id. */
  int ATMOST = 35;
  /** RegularExpression Id. */
  int EXACTLY = 36;
  /** RegularExpression Id. */
  int DEFINEROLE = 37;
  /** RegularExpression Id. */
  int DEFINEPRIMITIVEROLE = 38;
  /** RegularExpression Id. */
  int DISJOINTROLES = 39;
  /** RegularExpression Id. */
  int DOMAIN_ATTRIBUTE = 40;
  /** RegularExpression Id. */
  int IMPLIESROLE = 41;
  /** RegularExpression Id. */
  int INV = 42;
  /** RegularExpression Id. */
  int INVERSE = 43;
  /** RegularExpression Id. */
  int INVERSE_ATTRIBUTE = 44;
  /** RegularExpression Id. */
  int LEFT_IDENTITY_ATTRIBUTE = 45;
  /** RegularExpression Id. */
  int PARENT = 46;
  /** RegularExpression Id. */
  int PARENTS = 47;
  /** RegularExpression Id. */
  int RANGE = 48;
  /** RegularExpression Id. */
  int RANGE_ATTRIBUTE = 49;
  /** RegularExpression Id. */
  int REFLEXIVE_ATTRIBUTE = 50;
  /** RegularExpression Id. */
  int RIGHT_IDENTITY_ATTRIBUTE = 51;
  /** RegularExpression Id. */
  int ROLESEQUIVALENT = 52;
  /** RegularExpression Id. */
  int ROLE_INCLUSION = 53;
  /** RegularExpression Id. */
  int SUBROLE = 54;
  /** RegularExpression Id. */
  int SYMMETRIC_ATTRIBUTE = 55;
  /** RegularExpression Id. */
  int TRANSITIVE = 56;
  /** RegularExpression Id. */
  int TRANSITIVE_ATTRIBUTE = 57;
  /** RegularExpression Id. */
  int DEFINEINDIVIDUAL = 58;
  /** RegularExpression Id. */
  int DISTINCT = 59;
  /** RegularExpression Id. */
  int EQUAL = 60;
  /** RegularExpression Id. */
  int INSTANCE = 61;
  /** RegularExpression Id. */
  int RELATED = 62;
  /** RegularExpression Id. */
  int DPOINT = 63;
  /** RegularExpression Id. */
  int ENUM = 64;
  /** RegularExpression Id. */
  int INT = 65;
  /** RegularExpression Id. */
  int NAME = 66;
  /** RegularExpression Id. */
  int NCCHAR_FULL = 67;
  /** RegularExpression Id. */
  int NCCHAR1 = 68;
  /** RegularExpression Id. */
  int ERROR = 69;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;
  /** Lexical state. */
  int IN_IRI = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\\"\"",
    "\"|\"",
    "\"\\\\\"",
    "\"\\n\"",
    "\";\"",
    "\"\\n\"",
    "<token of kind 10>",
    "\"<\"",
    "\">\"",
    "<token of kind 13>",
    "<TOP>",
    "<BOTTOM>",
    "\"NIL\"",
    "\"t\"",
    "\"(\"",
    "\")\"",
    "\"end-tbox\"",
    "\"end-abox\"",
    "\"compose\"",
    "\"define-concept\"",
    "\"define-primitive-concept\"",
    "\"disjoint\"",
    "\"equivalent\"",
    "\"implies\"",
    "\"AND\"",
    "\"OR\"",
    "\"NOT\"",
    "\"ALL\"",
    "\"one-of\"",
    "\"SOME\"",
    "\"AT-LEAST\"",
    "\"AT-MOST\"",
    "\"EXACTLY\"",
    "\"define-role\"",
    "\"define-primitive-role\"",
    "\"disjoint-roles\"",
    "\":domain\"",
    "\"implies-role\"",
    "\"inv\"",
    "\"inverse\"",
    "\":inverse\"",
    "\":left-identity\"",
    "\":parent\"",
    "\":parents\"",
    "\"range\"",
    "\":range\"",
    "\":reflexive\"",
    "\":right-identity\"",
    "\"roles-equivalent\"",
    "\"role-inclusion\"",
    "\"subrole\"",
    "\":symmetric\"",
    "\"TRANSITIVE\"",
    "<TRANSITIVE_ATTRIBUTE>",
    "\"define-individual\"",
    "\"distinct\"",
    "\"equal\"",
    "\"instance\"",
    "\"related\"",
    "\":\"",
    "\"enum\"",
    "<INT>",
    "<NAME>",
    "<NCCHAR_FULL>",
    "<NCCHAR1>",
    "<ERROR>",
  };

}
