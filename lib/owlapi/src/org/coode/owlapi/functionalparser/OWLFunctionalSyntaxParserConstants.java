/*
 * This file is part of the OWL API.
 *
 * The contents of this file are subject to the LGPL License, Version 3.0.
 *
 * Copyright (C) 2011, The University of Manchester
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *
 *
 * Alternatively, the contents of this file may be used under the terms of the Apache License, Version 2.0
 * in which case, the provisions of the Apache License Version 2.0 are applicable instead of those above.
 *
 * Copyright 2011, The University of Manchester
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generated By:JavaCC: Do not edit this line. OWLFunctionalSyntaxParserConstants.java */
package org.coode.owlapi.functionalparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface OWLFunctionalSyntaxParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_START = 5;
  /** RegularExpression Id. */
  int STRINGLITERAL = 8;
  /** RegularExpression Id. */
  int OPENPAR = 9;
  /** RegularExpression Id. */
  int CLOSEPAR = 10;
  /** RegularExpression Id. */
  int ONTOLOGY = 11;
  /** RegularExpression Id. */
  int LABEL = 12;
  /** RegularExpression Id. */
  int IMPORT = 13;
  /** RegularExpression Id. */
  int COMMENT = 14;
  /** RegularExpression Id. */
  int SUBCLASSOF = 15;
  /** RegularExpression Id. */
  int LANGIDENTIFIER = 16;
  /** RegularExpression Id. */
  int DATATYPEIDENTIFIER = 17;
  /** RegularExpression Id. */
  int EQUIVALENTCLASSES = 18;
  /** RegularExpression Id. */
  int DISJOINTCLASSES = 19;
  /** RegularExpression Id. */
  int DISJOINTUNION = 20;
  /** RegularExpression Id. */
  int ANNOTATION = 21;
  /** RegularExpression Id. */
  int ANNOTATIONPROPERTY = 22;
  /** RegularExpression Id. */
  int ANNOTATIONASSERTION = 23;
  /** RegularExpression Id. */
  int SUBANNOTATIONPROPERTYOF = 24;
  /** RegularExpression Id. */
  int ANNOTATIONPROPERTYDOMAIN = 25;
  /** RegularExpression Id. */
  int ANNOTATIONPROPERTYRANGE = 26;
  /** RegularExpression Id. */
  int HASKEY = 27;
  /** RegularExpression Id. */
  int DECLARATION = 28;
  /** RegularExpression Id. */
  int DOCUMENTATION = 29;
  /** RegularExpression Id. */
  int CLASS = 30;
  /** RegularExpression Id. */
  int OBJECTPROP = 31;
  /** RegularExpression Id. */
  int DATAPROP = 32;
  /** RegularExpression Id. */
  int NAMEDINDIVIDUAL = 33;
  /** RegularExpression Id. */
  int DATATYPE = 34;
  /** RegularExpression Id. */
  int DATAONEOF = 35;
  /** RegularExpression Id. */
  int DATAUNIONOF = 36;
  /** RegularExpression Id. */
  int DATAINTERSECTIONOF = 37;
  /** RegularExpression Id. */
  int OBJECTONEOF = 38;
  /** RegularExpression Id. */
  int OBJECTUNIONOF = 39;
  /** RegularExpression Id. */
  int OBJECTHASVALUE = 40;
  /** RegularExpression Id. */
  int OBJECTINVERSEOF = 41;
  /** RegularExpression Id. */
  int INVERSEOBJECTPROPERTIES = 42;
  /** RegularExpression Id. */
  int DATACOMPLEMENTOF = 43;
  /** RegularExpression Id. */
  int DATATYPERESTRICTION = 44;
  /** RegularExpression Id. */
  int DATATYPEDEFINITION = 45;
  /** RegularExpression Id. */
  int OBJECTINTERSECTIONOF = 46;
  /** RegularExpression Id. */
  int OBJECTCOMPLEMENTOF = 47;
  /** RegularExpression Id. */
  int OBJECTALLVALUESFROM = 48;
  /** RegularExpression Id. */
  int OBJECTSOMEVALUESFROM = 49;
  /** RegularExpression Id. */
  int OBJECTHASSELF = 50;
  /** RegularExpression Id. */
  int OBJECTMINCARDINALITY = 51;
  /** RegularExpression Id. */
  int OBJECTMAXCARDINALITY = 52;
  /** RegularExpression Id. */
  int OBJECTEXACTCARDINALITY = 53;
  /** RegularExpression Id. */
  int DATAALLVALUESFROM = 54;
  /** RegularExpression Id. */
  int DATASOMEVALUESFROM = 55;
  /** RegularExpression Id. */
  int DATAHASVALUE = 56;
  /** RegularExpression Id. */
  int DATAMINCARDINALITY = 57;
  /** RegularExpression Id. */
  int DATAMAXCARDINALITY = 58;
  /** RegularExpression Id. */
  int DATAEXACTCARDINALITY = 59;
  /** RegularExpression Id. */
  int SUBOBJECTPROPERTYCHAIN = 60;
  /** RegularExpression Id. */
  int SUBOBJECTPROPERTYOF = 61;
  /** RegularExpression Id. */
  int EQUIVALENTOBJECTPROPERTIES = 62;
  /** RegularExpression Id. */
  int DISJOINTOBJECTPROPERTIES = 63;
  /** RegularExpression Id. */
  int OBJECTPROPERTYDOMAIN = 64;
  /** RegularExpression Id. */
  int OBJECTPROPERTYRANGE = 65;
  /** RegularExpression Id. */
  int FUNCTIONALOBJECTPROPERTY = 66;
  /** RegularExpression Id. */
  int INVERSEFUNCTIONALOBJECTPROPERTY = 67;
  /** RegularExpression Id. */
  int REFLEXIVEOBJECTPROPERTY = 68;
  /** RegularExpression Id. */
  int IRREFLEXIVEOBJECTPROPERTY = 69;
  /** RegularExpression Id. */
  int SYMMETRICOBJECTPROPERTY = 70;
  /** RegularExpression Id. */
  int ASYMMETRICOBJECTPROPERTY = 71;
  /** RegularExpression Id. */
  int TRANSITIVEOBJECTPROPERTY = 72;
  /** RegularExpression Id. */
  int SUBDATAPROPERTYOF = 73;
  /** RegularExpression Id. */
  int EQUIVALENTDATAPROPERTIES = 74;
  /** RegularExpression Id. */
  int DISJOINTDATAPROPERTIES = 75;
  /** RegularExpression Id. */
  int DATAPROPERTYDOMAIN = 76;
  /** RegularExpression Id. */
  int DATAPROPERTYRANGE = 77;
  /** RegularExpression Id. */
  int FUNCTIONALDATAPROPERTY = 78;
  /** RegularExpression Id. */
  int SAMEINDIVIDUAL = 79;
  /** RegularExpression Id. */
  int DIFFERENTINDIVIDUALS = 80;
  /** RegularExpression Id. */
  int CLASSASSERTION = 81;
  /** RegularExpression Id. */
  int OBJECTPROPERTYASSERTION = 82;
  /** RegularExpression Id. */
  int NEGATIVEOBJECTPROPERTYASSERTION = 83;
  /** RegularExpression Id. */
  int DATAPROPERTYASSERTION = 84;
  /** RegularExpression Id. */
  int NEGATIVEDATAPROPERTYASSERTION = 85;
  /** RegularExpression Id. */
  int PREFIX = 86;
  /** RegularExpression Id. */
  int LENGTH = 87;
  /** RegularExpression Id. */
  int MINLENGTH = 88;
  /** RegularExpression Id. */
  int MAXLENGTH = 89;
  /** RegularExpression Id. */
  int PATTERN = 90;
  /** RegularExpression Id. */
  int MININCLUSIVE = 91;
  /** RegularExpression Id. */
  int MAXINCLUSIVE = 92;
  /** RegularExpression Id. */
  int MINEXCLUSIVE = 93;
  /** RegularExpression Id. */
  int MAXEXCLUSIVE = 94;
  /** RegularExpression Id. */
  int TOTALDIGITS = 95;
  /** RegularExpression Id. */
  int FRACTIONDIGITS = 96;
  /** RegularExpression Id. */
  int DLSAFERULE = 97;
  /** RegularExpression Id. */
  int BODY = 98;
  /** RegularExpression Id. */
  int HEAD = 99;
  /** RegularExpression Id. */
  int CLASSATOM = 100;
  /** RegularExpression Id. */
  int DATARANGEATOM = 101;
  /** RegularExpression Id. */
  int OBJECTPROPERTYATOM = 102;
  /** RegularExpression Id. */
  int DATAPROPERTYATOM = 103;
  /** RegularExpression Id. */
  int BUILTINATOM = 104;
  /** RegularExpression Id. */
  int SAMEINDIVIDUALATOM = 105;
  /** RegularExpression Id. */
  int DIFFERENTINDIVIDUALSATOM = 106;
  /** RegularExpression Id. */
  int VARIABLE = 107;
  /** RegularExpression Id. */
  int DGRULE = 108;
  /** RegularExpression Id. */
  int DESCRIPTIONGRAPH = 109;
  /** RegularExpression Id. */
  int NODES = 110;
  /** RegularExpression Id. */
  int NODEASSERTION = 111;
  /** RegularExpression Id. */
  int EDGES = 112;
  /** RegularExpression Id. */
  int EDGEASSERTION = 113;
  /** RegularExpression Id. */
  int MAINCLASSES = 114;
  /** RegularExpression Id. */
  int EQUALS = 115;
  /** RegularExpression Id. */
  int INT = 116;
  /** RegularExpression Id. */
  int FULLIRI = 117;
  /** RegularExpression Id. */
  int PNAME_NS = 118;
  /** RegularExpression Id. */
  int PN_LOCAL = 119;
  /** RegularExpression Id. */
  int PNAME_LN = 120;
  /** RegularExpression Id. */
  int PN_PREFIX = 121;
  /** RegularExpression Id. */
  int PN_CHARS_BASE = 122;
  /** RegularExpression Id. */
  int PN_CHARS = 123;
  /** RegularExpression Id. */
  int PN_CHARS_U = 124;
  /** RegularExpression Id. */
  int NODEID = 125;
  /** RegularExpression Id. */
  int ERROR = 126;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\r\"",
    "\"//\"",
    "<token of kind 6>",
    "\"\\n\"",
    "<STRINGLITERAL>",
    "\"(\"",
    "\")\"",
    "\"Ontology\"",
    "\"Label\"",
    "\"Import\"",
    "\"Comment\"",
    "\"SubClassOf\"",
    "\"@\"",
    "\"^^\"",
    "\"EquivalentClasses\"",
    "\"DisjointClasses\"",
    "\"DisjointUnion\"",
    "\"Annotation\"",
    "\"AnnotationProperty\"",
    "\"AnnotationAssertion\"",
    "\"SubAnnotationPropertyOf\"",
    "\"AnnotationPropertyDomain\"",
    "\"AnnotationPropertyRange\"",
    "\"HasKey\"",
    "\"Declaration\"",
    "\"Documentation\"",
    "\"Class\"",
    "\"ObjectProperty\"",
    "\"DataProperty\"",
    "\"NamedIndividual\"",
    "\"Datatype\"",
    "\"DataOneOf\"",
    "\"DataUnionOf\"",
    "\"DataIntersectionOf\"",
    "\"ObjectOneOf\"",
    "\"ObjectUnionOf\"",
    "\"ObjectHasValue\"",
    "\"ObjectInverseOf\"",
    "\"InverseObjectProperties\"",
    "\"DataComplementOf\"",
    "\"DatatypeRestriction\"",
    "\"DatatypeDefinition\"",
    "\"ObjectIntersectionOf\"",
    "\"ObjectComplementOf\"",
    "\"ObjectAllValuesFrom\"",
    "\"ObjectSomeValuesFrom\"",
    "\"ObjectHasSelf\"",
    "\"ObjectMinCardinality\"",
    "\"ObjectMaxCardinality\"",
    "\"ObjectExactCardinality\"",
    "\"DataAllValuesFrom\"",
    "\"DataSomeValuesFrom\"",
    "\"DataHasValue\"",
    "\"DataMinCardinality\"",
    "\"DataMaxCardinality\"",
    "\"DataExactCardinality\"",
    "\"ObjectPropertyChain\"",
    "\"SubObjectPropertyOf\"",
    "\"EquivalentObjectProperties\"",
    "\"DisjointObjectProperties\"",
    "\"ObjectPropertyDomain\"",
    "\"ObjectPropertyRange\"",
    "\"FunctionalObjectProperty\"",
    "\"InverseFunctionalObjectProperty\"",
    "\"ReflexiveObjectProperty\"",
    "\"IrreflexiveObjectProperty\"",
    "\"SymmetricObjectProperty\"",
    "\"AsymmetricObjectProperty\"",
    "\"TransitiveObjectProperty\"",
    "\"SubDataPropertyOf\"",
    "\"EquivalentDataProperties\"",
    "\"DisjointDataProperties\"",
    "\"DataPropertyDomain\"",
    "\"DataPropertyRange\"",
    "\"FunctionalDataProperty\"",
    "\"SameIndividual\"",
    "\"DifferentIndividuals\"",
    "\"ClassAssertion\"",
    "\"ObjectPropertyAssertion\"",
    "\"NegativeObjectPropertyAssertion\"",
    "\"DataPropertyAssertion\"",
    "\"NegativeDataPropertyAssertion\"",
    "\"Prefix\"",
    "\"length\"",
    "\"minLength\"",
    "\"maxLength\"",
    "\"pattern\"",
    "\"minInclusive\"",
    "\"maxInclusive\"",
    "\"minExclusive\"",
    "\"maxExclusive\"",
    "\"totalDigits\"",
    "\"fractionDigits\"",
    "\"DLSafeRule\"",
    "\"Body\"",
    "\"Head\"",
    "\"ClassAtom\"",
    "\"DataRangeAtom\"",
    "\"ObjectPropertyAtom\"",
    "\"DataPropertyAtom\"",
    "\"BuiltInAtom\"",
    "\"SameIndividualAtom\"",
    "\"DifferentIndividualsAtom\"",
    "\"Variable\"",
    "\"DescriptionGraphRule\"",
    "\"DescriptionGraph\"",
    "\"Nodes\"",
    "\"NodeAssertion\"",
    "\"Edges\"",
    "\"EdgeAssertion\"",
    "\"MainClasses\"",
    "\"=\"",
    "<INT>",
    "<FULLIRI>",
    "<PNAME_NS>",
    "<PN_LOCAL>",
    "<PNAME_LN>",
    "<PN_PREFIX>",
    "<PN_CHARS_BASE>",
    "<PN_CHARS>",
    "<PN_CHARS_U>",
    "<NODEID>",
    "<ERROR>",
  };

}
