options {
JAVA_UNICODE_ESCAPE=true;
    STATIC=false;
    //DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(OBOParser)

package org.coode.owlapi.obo.parser;

import org.semanticweb.owlapi.model.*;
import java.net.*;
import java.util.*;
import org.coode.string.*;

@SuppressWarnings("all")
public class OBOParser {

    private OBOParserHandler handler;

    public void setHandler(OBOParserHandler handler) {
        this.handler = handler;
    }
}

PARSER_END(OBOParser)



/////////////////////////////////////////////////////////////////////////////////

SKIP:
{
    <"\n">
}

SKIP:
{
    <"\r">
}

SKIP:
{
    <"\t">
}

SKIP:
{
    <" ">
}

/////////////////////////////////////////////////////////////////////////////////////

<DEFAULT> SKIP :
{
    <LINE_COMMENTED_OUT: "!"(~["\r","\n"])*>
}

TOKEN:
{
    <OPEN_SQUARE_BRACKET: "["> : IN_STANZA_HEADER
}

<IN_STANZA_HEADER> TOKEN:
{
    <STANZA_TYPE: (~["]"])+>
}

<IN_STANZA_HEADER> TOKEN:
{
    <CLOSE_SQUARE_BRACKET: "]"> : DEFAULT
}



TOKEN:
{
    <TAG_NAME: (~["[",":","\n","\r"])+> : IN_TAG_VALUE_PAIR
}

<IN_TAG_VALUE_PAIR> SKIP:
{
    <TAG_COLON: ":"((" ")*)> : IN_TAG_VALUE
}


/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
////
////
////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

<IN_TAG_VALUE> TOKEN :
{
    <TAG_VALUE: (~["\n","\r","!"]|"\\"~["\n"])+>
}

<IN_TAG_VALUE> SKIP :
{
    <TAG_VALUE_END: ("\n"|"\r")+> : DEFAULT
}

<IN_TAG_VALUE> TOKEN:
{
    <COMMENT_START: "!"> : IN_COMMENT
}

<IN_COMMENT> TOKEN :
{
    <COMMENT: (~["\r","\n"])+>
}

<IN_COMMENT> SKIP :
{
    <COMMENT_END: ("\n"|"\r")+> : DEFAULT
}


TOKEN:
{
    <ERROR: (~[])>
}


public void parse() :
{
}
{
    Header()(Stanza())+<EOF>
}

void Header() :
{
}
{
    {handler.startHeader();}
    ((TagValuePair())*)
    {handler.endHeader();}
}




void Stanza() :
{
    Token t;
}
{


    (<OPEN_SQUARE_BRACKET>t=<STANZA_TYPE>{handler.startStanza(t.image);}<CLOSE_SQUARE_BRACKET> (TagValuePair())*)
    {handler.endStanza();}
}


void TagValuePair() :
{
    Token tagToken = null;
    Token valToken = null;
    String comment = "";
}
{
    tagToken=<TAG_NAME> (valToken=<TAG_VALUE>)? (comment=Comment())? {
        String name = tagToken.image.trim();
        String val = "";
        if(valToken != null) {
            val=valToken.image.trim();
        }
        handler.handleTagValue(name, val, comment);
    }


}



String Comment() :
{
    Token t;
}
{
     <COMMENT_START> t=<COMMENT> {return t.image;}
}